{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nexport let HomeComponent = class HomeComponent {\n  constructor(service) {\n    this.service = service;\n    this.extypeData = [];\n    this.selectedExType = '';\n    this.exAmount = 0;\n    this.inctypeData = [];\n    this.selectedIncType = '';\n    this.incAmount = 0;\n  }\n  ngOnInit() {\n    this.service.getAllExType().subscribe(response => {\n      this.extypeData = response.data;\n    });\n    this.service.getAllIncType().subscribe(response => {\n      this.inctypeData = response.data;\n    });\n  }\n  ngAfterViewInit() {\n    this.currencyInput.nativeElement.addEventListener('keyup', () => {\n      this.formatCurrency(this.currencyInput.nativeElement);\n    });\n    this.currencyInput.nativeElement.addEventListener('blur', () => {\n      this.formatCurrency(this.currencyInput.nativeElement, 'blur');\n    });\n  }\n  formatNumber(n) {\n    // format number 1000000 to 1,234,567\n    return n.replace(/\\D/g, '').replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n  formatCurrency(input, blur = '') {\n    // appends $ to value, validates decimal side\n    // and puts the cursor back in the right position.\n    // get input value\n    const inputVal = input.value;\n    // don't validate empty input\n    // original length\n    const originalLen = inputVal.length;\n    // initial caret position\n    const caretPos = input.selectionStart?.valueOf() || 0;\n    // check for decimal\n    if (inputVal.indexOf('.') >= 0) {\n      // get the position of the first decimal\n      const decimalPos = inputVal.indexOf('.');\n      // split number by decimal point\n      const leftSide = inputVal.substring(0, decimalPos);\n      const rightSide = inputVal.substring(decimalPos);\n      // add commas to the left side of the number\n      const formattedLeftSide = this.formatNumber(leftSide);\n      // validate the right side\n      let formattedRightSide = this.formatNumber(rightSide);\n      // On blur, make sure there are 2 numbers after the decimal\n      if (blur === 'blur') {\n        formattedRightSide += '00';\n      }\n      // Limit the decimal to only 2 digits\n      const limitedRightSide = formattedRightSide.substring(0, 2);\n      // join the number by .\n      input.value = `${formattedLeftSide}.${limitedRightSide}`;\n    } else {\n      // no decimal entered\n      // add commas to the number\n      // remove all non-digits\n      let formattedInputVal = this.formatNumber(inputVal);\n      formattedInputVal = `${formattedInputVal}`;\n      // final formatting\n      if (blur === 'blur') {\n        formattedInputVal += '.00';\n      }\n      input.value = formattedInputVal;\n    }\n    // put the caret back in the right position\n    const updatedLen = input.value.length;\n    const updatedCaretPos = updatedLen - originalLen + caretPos;\n    input.setSelectionRange(updatedCaretPos, updatedCaretPos);\n  }\n};\n__decorate([ViewChild('currencyInput', {\n  static: false\n})], HomeComponent.prototype, \"currencyInput\", void 0);\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);","map":{"version":3,"names":["Component","ViewChild","HomeComponent","constructor","service","extypeData","selectedExType","exAmount","inctypeData","selectedIncType","incAmount","ngOnInit","getAllExType","subscribe","response","data","getAllIncType","ngAfterViewInit","currencyInput","nativeElement","addEventListener","formatCurrency","formatNumber","n","replace","input","blur","inputVal","value","originalLen","length","caretPos","selectionStart","valueOf","indexOf","decimalPos","leftSide","substring","rightSide","formattedLeftSide","formattedRightSide","limitedRightSide","formattedInputVal","updatedLen","updatedCaretPos","setSelectionRange","__decorate","static","selector","templateUrl","styleUrls"],"sources":["D:\\Software projects\\Project\\ANGULAR\\aboutMoney-angular\\frontend\\src\\app\\pages\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, ViewChild, AfterViewInit, OnInit } from '@angular/core';\nimport { ApiserviceService } from 'src/app/apiservice.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit, AfterViewInit {\n  extypeData: any[] = [];\n  selectedExType: string = '';\n  exAmount: number = 0;\n\n  inctypeData: any[] = [];\n  selectedIncType: string = '';\n  incAmount: number = 0;\n\n  constructor(private service: ApiserviceService) { }\n\n  ngOnInit(): void {\n    this.service.getAllExType().subscribe(response => {\n      this.extypeData = response.data;\n    })\n    this.service.getAllIncType().subscribe(response => {\n      this.inctypeData = response.data;\n    })\n  }\n\n  @ViewChild('currencyInput', { static: false }) currencyInput!: ElementRef;\n\n  ngAfterViewInit(): void {\n    this.currencyInput.nativeElement.addEventListener('keyup', () => {\n      this.formatCurrency(this.currencyInput.nativeElement);\n    });\n    this.currencyInput.nativeElement.addEventListener('blur', () => {\n      this.formatCurrency(this.currencyInput.nativeElement, 'blur');\n    });\n  }\n\n  formatNumber(n: string): string {\n    // format number 1000000 to 1,234,567\n    return n.replace(/\\D/g, '').replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  formatCurrency(input: HTMLInputElement, blur: string = ''): void {\n    // appends $ to value, validates decimal side\n    // and puts the cursor back in the right position.\n\n    // get input value\n    const inputVal = input.value;\n\n    // don't validate empty input\n\n    // original length\n    const originalLen = inputVal.length;\n\n    // initial caret position\n    const caretPos = input.selectionStart?.valueOf() || 0; \n\n    // check for decimal\n    if (inputVal.indexOf('.') >= 0) {\n      // get the position of the first decimal\n      const decimalPos = inputVal.indexOf('.');\n\n      // split number by decimal point\n      const leftSide = inputVal.substring(0, decimalPos);\n      const rightSide = inputVal.substring(decimalPos);\n\n      // add commas to the left side of the number\n      const formattedLeftSide = this.formatNumber(leftSide);\n\n      // validate the right side\n      let formattedRightSide = this.formatNumber(rightSide);\n\n      // On blur, make sure there are 2 numbers after the decimal\n      if (blur === 'blur') {\n        formattedRightSide += '00';\n      }\n\n      // Limit the decimal to only 2 digits\n      const limitedRightSide = formattedRightSide.substring(0, 2);\n\n      // join the number by .\n      input.value = `${formattedLeftSide}.${limitedRightSide}`;\n    } else {\n      // no decimal entered\n      // add commas to the number\n      // remove all non-digits\n      let formattedInputVal = this.formatNumber(inputVal);\n      formattedInputVal = `${formattedInputVal}`;\n\n      // final formatting\n      if (blur === 'blur') {\n        formattedInputVal += '.00';\n      }\n\n      input.value = formattedInputVal;\n\n    }\n\n    // put the caret back in the right position\n    const updatedLen = input.value.length;\n    const updatedCaretPos = updatedLen - originalLen + caretPos;\n    input.setSelectionRange(updatedCaretPos, updatedCaretPos);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}